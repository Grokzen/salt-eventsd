#
# NOTE: THIS IS NOT A WORKING CONFIGURATION! ITS BRAINDUMP
#       OF HOW IT COULD BE DONE ON THE FUTURE.

###### GENERAL SETTINGS #######
###############################
# general configuration settings for the daemon. Do not
# remove any unless you really know what you're doing!
general: 
    # where is the socket for the events located
    # /var/run/salt/master for salt-master
    # /var/run/salt/minion for the salt-minion
    # when run on a minion, always set 'node' to 'minion' too
    sock_dir: /var/run/salt/master
    node: master
    # the id the listener should use while listening for events
    id: master
    # where the daemon should put its pidfile
    pidfile: /var/run/salt-eventsd.pid
    # the loglevel to use, this is used for the logfile as well as for the 
    # console if the daemon is started in the foreground (debug mode)
    loglevel: debug
    # the logfile the daemon should log into
    logfile: /var/log/salt/eventsd

###### DUMPER SETTINGS #######
##############################
# This settings configure the credentials for the dumpers used in the events
# each dumper that requires a connection and/or authentication has to be configured
# here before being available to the events
mysql: 
    username: collector
    password: Ahpoohah3shupaiz1ooj
    db  : saltresults
    host: localhost

mongodb:
    username: collector
    password: Ahpoohah3shupaiz1ooj
    db  : saltresults
    host: localhost

###### EVENT SETTINGS #######
#############################
# The events the daemon should collect from the events bus. Every events must
# have the following fields:
# name:
#   tag: the tag of the event to collect
#   mysql_tab: the mysql table the event should be written into
#   template: the sql-query to execute for this event
#   dict_name: the name of the dictionary in the event that holds our data
#   fields: what keys:values to take from that dict_name
#
# NOTE: that the number of fields taken from dict_name and the format() fields
#       in the sql-template have to match exactly. Otherwise you will end up
#       with wrong sql-syntax or wrong data in your sql-tables.
events: 
    # name of the event, can be anything, its not used anywhere but in here
    new_job: 
        # the tag of the event, can also be a regular expression 
        # as long as its supported by python, properly escaped
        # and quoted. regular strings dont need quoting
        tag: new_job
        # the sql-query to perform with the events data
        template: "insert into {0} (jid, user, fun, arg, tgt, tgt_type) values ('{1}', '{2}', '{3}', '{4}', '{5}', '{6}');"
        # the dictionary that holds the events data
        dict_name: data
        # the fields from the dict above we want to use
        fields: [jid, user, fun, arg, tgt, tgt_type]
	# the dumper to use for this event
	dumper: mysql
	# how many events to collect before dumping the data
	watermark: 100
	# how many threads the dumper should create
	max_threads: 50
	# after how many seconds with no collected events should the dumper
	# start a worker thread to save the data to disk
	dump_timer: 50

    return: 
        tag: "\\d{20}"
        template: "db.return.insert(...."
        dict_name: data
        fields: [jid, id, retcode, return, success]
	dumper: mongodb
	watermark: 100
	max_threads: 50
	dump_timer: 60
        
    
