#### salt-eventsd installation ####
###################################

last update: Feb 28th, 2014

the daemon requires at least saltstack 0.16.2 with the 'new_job' event. 

check this commit against your salt-master source.
https://github.com/saltstack/salt/pull/6551

verified? good!

installation is simple for the mysql-backend.

1. install mysql-server and create a database, name does not matter, just remember it.
2. import the supplied mysql-dump from /usr/share/doc/salt-eventsd/ into your 
   database. 
   
   $ cat /usr/share/doc/salt-eventsd/mysql-example.sql | mysql <database_name>

   it will create two tables:
    
      <database_name>.command: thats where all published commands go
      <database_name>.results: thats where all the replies go

3. have a look at the salt-eventsd config: /etc/salt/events. just notice, that there
   are different sections:

   general
   events
      - event_name1
      - event_name2
      - etc.

    each settings has comments that try to describe what the setting does.

4. have a look at the backnds in /etc/salt/eventsd_workers/ and adjust
   their mysql-credentials at the very top

5. (re)start the daemon with its init-skript and the data should start coming in
   once you issue a few commands to your minions. issued commands can be found in the 
   'commands'-table, the results in 'results'.

6. if you dont see any data coming in, see the debug section below and tail the logfile
   /var/log/salt/eventsd


A few words on filtering:
The salt-eventsd reads all events from the event-bus which match the tags configured
in the config (others are ignored). The results the minions return, always have a jid
as tag. Matching on that to get all the returns is no problem, but its not possible to 
filter and sort any further just by the tag.

If collecting all results is good enough for you, you're fine. The default config and workers
alread do that for you.

If you have more filtering- and sorting-needs, you have to define sub-events under the 
'return'-event. Why under the return-event? Because it already matches on returns. The sub-events
just give more control over an already matched result.

Example:

test.ping would return something like this:

  {'tag': '20130911154847888287', 
   'data': {'jid': '20130911154847888287', 
            'return': True, 
	    'retcode': 0, 
	    'success': True, 
	    'cmd': '_return', 
	    'fun': 'test.ping', 
	    'id': 'wp033.webpack.hosteurope.de'}
  }

Because the 'return'-event matches on the 20-digit tag, the result would be put into
the 'results'table. That works for all events as long as the 'return'-event is left in
the config-file. By defining a sub-event under the 'return'-event, the event will by processed
further.

After matching the 20-digit-tag, the daemon will check, if there a more events defined under the
'return'-event. If so, the daemon will check all sub-events if they match on the 'fun'-field and
use that sub-event-config if it matches. See the config-file for sub-event configurations.


New backend-feature:
With 0.5 the daemon can handle multiple backends. You can have your minion-returns in 
different mysql-tables, or have them sent to a graphite server, or, or, or. Its up to you,
you can easily write you own workers that do whatever you want them to. They just have to 
follow a few guidelines.


#### debugging ####
###################
1. set the debugging level in config to 'debug' and restart the daemon. the logfile
   in /var/log/salt/ will (hopefully) tell you whats going wrong.

2. if the daemon does not respond anymore, you're free to kill it with 'kill -9 <pid'.
   if thats necessary, start the daemon on the command line with:

       $ salt-eventsd fg

   and redo what you did before. If there is an exception, it will be printed to the
   console where the daemon is running in the foreground. I'd appreciate it, if you
   would open an issue for that and supply the backtrace. THANK YOU!


#### contact ####
#################
feel free to contact me via github or mail@blafoo.org. sometimes i'm on irc at
kornbluth.freenode.net in #salt and/or #salt-devel with the nick 'felskrone'. but 
please remember, that i am from europe/germany and salt is currently more popular 
in the US. Answering might take me a day or two.

